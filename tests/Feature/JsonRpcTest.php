<?php

namespace Tests\Feature;

use App\Entity\Currency;
use App\Http\Controllers\JsonRpcController;
use App\Repository\CurrencyRepository;
use App\Service\CurrencyService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Thiagof\LaravelRPC\RpcClientFacade;

class JsonRpcTest extends TestCase
{
    use RefreshDatabase;

    private static $currencyRepository;
    private static $currencyService;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::$currencyRepository = new CurrencyRepository();
        self::$currencyService = new CurrencyService(self::$currencyRepository);

        factory(Currency::class, 5)->create();
        app('config')->set('rpc.client.url', 'http://localhost');
    }

    public function testGetCurrencies()
    {
        $payload = '{"jsonrpc": "2.0", "method": "getCurrencyList", "id": 1}';
        $server = app()->make('JsonRpcServer', [$payload]);
        $server->attach(new JsonRpcController(self::$currencyService));
        $response = json_decode($server->execute(), true);
        $firstFoundCurrency = $response['result']['original'][0];

        $this->assertTrue(isset($firstFoundCurrency['short_name']));
    }

    public function testUpdateCurrency()
    {
        $payload = '{"jsonrpc": "2.0", "method": "shortNameAndActualPriceUpdate", "params": ["BitCoIn", 6969.69, 4], "id": 4}';
        $server = app()->make('JsonRpcServer', [$payload]);
        $server->attach(new JsonRpcController(self::$currencyService));
        $response = json_decode($server->execute(), true);
        $currency = $response['result']['original'];

        $this->assertEquals('BitCoIn', $currency['short_name']);
        $this->assertEquals(6969.69, $currency['actual_course']);
    }

    public function testGetCurrency()
    {
        $payload = '{"jsonrpc": "2.0", "method": "getCurrency", "params": [5], "id": 5}';
        $server = app()->make('JsonRpcServer', [$payload]);
        $server->attach(new JsonRpcController(self::$currencyService));
        $response = json_decode($server->execute(), true);
        $currency = $response['result']['original'];

        $this->assertEquals(5, $currency['id']);
        $this->assertTrue(isset($currency['short_name'], $currency['actual_course']));
    }
}
